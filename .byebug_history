c
organic_links
Organic links
c
links.length
links.lenght
links
c
search_results.css("div[data-text-ad]")
search_results
ad_links
c
doc.css("div[data-text-ad]").each { |ad| ad.count }
doc.css("div[data-text-ad]").each { |ad| ad }
doc.css("div[data-text-ad]").map |ad| ad.count
doc.css("div[data-text-ad]")
search_results.css("div[data-text-ad]")
doc.css("body").empty?
doc.css("body")
doc
c
doc
page_source.body
page_source
driver.page_source
driver
c
n
search_results.css("div[data-text-ad]")
search_results
searh_results
c
doc
doc.css('div[data-text-ad="1"]')
c
sponsored_links.count
sponsored_links
sponsord_links.count
sponsored_links
c
doc
c
doc
c
doc
c
Zlib::GzipReader.new(StringIO.new(response.body)).read
response["Content-Encoding"]
body
response
Nokogiri::HTML(body)
response.body
response
c
body.css("a")
body = Nokogiri::HTML(response.body)
response
c
@keyword.name
URI.encode_www_form_component(@keyword.name)
request
uri
uri.host
http
doc
doc.css("a")
doc.css("#result-stats").text.strip
doc.css('div[data-text-ad="1"]').count
doc.css("a").count
doc.css("a")
doc
doc = Nokogiri::HTML(response.body)
Nokogiri::HTML(response.body)
response.body
response
c
Nokogiri::HTML(response.body)
response
c
doc.css("div[data-text-ad]")
doc
doc.css('div.g a')
doc.css("div[data-text-ad]")
doc.css
doc
ad_links.count
ad_links.size
ad_links
c
response.body
c
n
keyword_count
n
c
n
keyword_name.blank?
keyword_name
c
n
content
content = file.download
file.download
file.attached?
file
c
CSV.parse(content).count
CSV.parse(content, headers: true).count
content
contenct
c
@keyword_file.total_keywords
@keyword_file
@keywordfile
keyword_count
c
keywords
@keyword_file.valid?
kf
kf.total_keywords.to_i
kf.total_keywords
kf
kf = @keyword_file
@keyword_file
c
